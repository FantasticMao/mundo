package cn.fantasticmao.mundo.data.support;

import org.springframework.core.convert.converter.Converter;
import org.springframework.data.convert.ReadingConverter;
import org.springframework.data.convert.WritingConverter;

import javax.annotation.Nonnull;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

/**
 * Converters to convert {@link java.lang.String String} to or from {@link java.time.LocalTime LocalTime},
 * {@link java.time.LocalDate LocalDate}, {@link java.time.LocalDateTime LocalDateTime} which value
 * is generated by SQLite's {@code CURRENT_TIME}, {@code CURRENT_DATE}, {@code CURRENT_TIMESTAMP}
 * keywords in the default clause.
 *
 * @author fantasticmao
 * @version 1.0.10
 * @since 2022-12-13
 */
interface SQLiteConverters {

    @ReadingConverter
    enum StringToLocalTime implements Converter<String, LocalTime> {
        INSTANCE;

        private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");

        @Override
        public LocalTime convert(@Nonnull String source) {
            return LocalTime.parse(source, formatter);
        }
    }

    @ReadingConverter
    enum StringToLocalDate implements Converter<String, LocalDate> {
        INSTANCE;

        private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        @Override
        public LocalDate convert(@Nonnull String source) {
            return LocalDate.parse(source, formatter);
        }
    }

    @ReadingConverter
    enum StringToLocalDateTime implements Converter<String, LocalDateTime> {
        INSTANCE;

        private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

        @Override
        public LocalDateTime convert(@Nonnull String source) {
            return LocalDateTime.parse(source, formatter);
        }
    }

    @WritingConverter
    enum LocalTimeToString implements Converter<LocalTime, String> {
        INSTANCE;

        private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");

        @Override
        public String convert(@Nonnull LocalTime source) {
            return formatter.format(source);
        }
    }

    @WritingConverter
    enum LocalDateToString implements Converter<LocalDate, String> {
        INSTANCE;

        private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        @Override
        public String convert(@Nonnull LocalDate source) {
            return formatter.format(source);
        }
    }

    @WritingConverter
    enum LocalDateTimeToString implements Converter<LocalDateTime, String> {
        INSTANCE;

        private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

        @Override
        public String convert(@Nonnull LocalDateTime source) {
            return formatter.format(source);
        }
    }

}
